#
# Autogenerated by Thrift Compiler (1.0.0-dev)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
require 5.6.0;
use strict;
use warnings;
use Thrift;

use AllSparkCube::Types;

# HELPER FUNCTIONS AND STRUCTURES

package AllSparkCube::CubeInterface_set_data_args;
use base qw(Class::Accessor);
AllSparkCube::CubeInterface_set_data_args->mk_accessors( qw( index data ) );

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  $self->{index} = undef;
  $self->{data} = undef;
  if (UNIVERSAL::isa($vals,'HASH')) {
    if (defined $vals->{index}) {
      $self->{index} = $vals->{index};
    }
    if (defined $vals->{data}) {
      $self->{data} = $vals->{data};
    }
  }
  return bless ($self, $classname);
}

sub getName {
  return 'CubeInterface_set_data_args';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
      /^1$/ && do{      if ($ftype == TType::I16) {
        $xfer += $input->readI16(\$self->{index});
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
      /^2$/ && do{      if ($ftype == TType::LIST) {
        {
          my $_size0 = 0;
          $self->{data} = [];
          my $_etype3 = 0;
          $xfer += $input->readListBegin(\$_etype3, \$_size0);
          for (my $_i4 = 0; $_i4 < $_size0; ++$_i4)
          {
            my $elem5 = undef;
            $xfer += $input->readI16(\$elem5);
            push(@{$self->{data}},$elem5);
          }
          $xfer += $input->readListEnd();
        }
      } else {
        $xfer += $input->skip($ftype);
      }
      last; };
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CubeInterface_set_data_args');
  if (defined $self->{index}) {
    $xfer += $output->writeFieldBegin('index', TType::I16, 1);
    $xfer += $output->writeI16($self->{index});
    $xfer += $output->writeFieldEnd();
  }
  if (defined $self->{data}) {
    $xfer += $output->writeFieldBegin('data', TType::LIST, 2);
    {
      $xfer += $output->writeListBegin(TType::I16, scalar(@{$self->{data}}));
      {
        foreach my $iter6 (@{$self->{data}}) 
        {
          $xfer += $output->writeI16($iter6);
        }
      }
      $xfer += $output->writeListEnd();
    }
    $xfer += $output->writeFieldEnd();
  }
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AllSparkCube::CubeInterface_set_data_result;
use base qw(Class::Accessor);

sub new {
  my $classname = shift;
  my $self      = {};
  my $vals      = shift || {};
  return bless ($self, $classname);
}

sub getName {
  return 'CubeInterface_set_data_result';
}

sub read {
  my ($self, $input) = @_;
  my $xfer  = 0;
  my $fname;
  my $ftype = 0;
  my $fid   = 0;
  $xfer += $input->readStructBegin(\$fname);
  while (1) 
  {
    $xfer += $input->readFieldBegin(\$fname, \$ftype, \$fid);
    if ($ftype == TType::STOP) {
      last;
    }
    SWITCH: for($fid)
    {
        $xfer += $input->skip($ftype);
    }
    $xfer += $input->readFieldEnd();
  }
  $xfer += $input->readStructEnd();
  return $xfer;
}

sub write {
  my ($self, $output) = @_;
  my $xfer   = 0;
  $xfer += $output->writeStructBegin('CubeInterface_set_data_result');
  $xfer += $output->writeFieldStop();
  $xfer += $output->writeStructEnd();
  return $xfer;
}

package AllSparkCube::CubeInterfaceIf;

use strict;


sub set_data{
  my $self = shift;
  my $index = shift;
  my $data = shift;

  die 'implement interface';
}

package AllSparkCube::CubeInterfaceRest;

use strict;


sub new {
  my ($classname, $impl) = @_;
  my $self     ={ impl => $impl };

  return bless($self,$classname);
}

sub set_data{
  my ($self, $request) = @_;

  my $index = ($request->{'index'}) ? $request->{'index'} : undef;
  my $data = ($request->{'data'}) ? $request->{'data'} : undef;
  return $self->{impl}->set_data($index, $data);
}

package AllSparkCube::CubeInterfaceClient;


use base qw(AllSparkCube::CubeInterfaceIf);
sub new {
  my ($classname, $input, $output) = @_;
  my $self      = {};
  $self->{input}  = $input;
  $self->{output} = defined $output ? $output : $input;
  $self->{seqid}  = 0;
  return bless($self,$classname);
}

sub set_data{
  my $self = shift;
  my $index = shift;
  my $data = shift;

    $self->send_set_data($index, $data);
}

sub send_set_data{
  my $self = shift;
  my $index = shift;
  my $data = shift;

  $self->{output}->writeMessageBegin('set_data', TMessageType::CALL, $self->{seqid});
  my $args = new AllSparkCube::CubeInterface_set_data_args();
  $args->{index} = $index;
  $args->{data} = $data;
  $args->write($self->{output});
  $self->{output}->writeMessageEnd();
  $self->{output}->getTransport()->flush();
}
package AllSparkCube::CubeInterfaceProcessor;

use strict;


sub new {
    my ($classname, $handler) = @_;
    my $self      = {};
    $self->{handler} = $handler;
    return bless ($self, $classname);
}

sub process {
    my ($self, $input, $output) = @_;
    my $rseqid = 0;
    my $fname  = undef;
    my $mtype  = 0;

    $input->readMessageBegin(\$fname, \$mtype, \$rseqid);
    my $methodname = 'process_'.$fname;
    if (!$self->can($methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      my $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $self->$methodname($rseqid, $input, $output);
    return 1;
}

sub process_set_data {
    my ($self, $seqid, $input, $output) = @_;
    my $args = new AllSparkCube::CubeInterface_set_data_args();
    $args->read($input);
    $input->readMessageEnd();
    $self->{handler}->set_data($args->index, $args->data);
    return;
}
1;
